{"ast":null,"code":"var _jsxFileName = \"/home/trigger/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Docker-React/react-tutorial-real-app/src/providers/AuthProvider/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { AuthContext } from \"../../contexts/AuthContext\";\nimport api from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setTokenData] = useState(null);\n  const setToken = useCallback(tokenData => {\n    setTokenData(tokenData);\n\n    if (tokenData) {\n      Cookies.set(\"auth-token\", tokenData);\n    } else {\n      Cookies.remove(\"auth-token\");\n    }\n  }, []);\n  const logOut = useCallback(() => {\n    setUser(null);\n    setToken(null);\n  }, [setToken]);\n  const loadData = useCallback(async () => {\n    const tokenData = Cookies.get(\"auth-token\");\n    setTokenData(tokenData);\n\n    try {\n      if (tokenData) {\n        const {\n          data\n        } = await api.auth.getProfile();\n        setUser(data);\n      }\n    } catch {\n      setToken(null);\n    } finally {\n      setIsLoaded(true);\n    }\n  }, [setToken]);\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n  const contextValue = useMemo(() => ({\n    isLoaded,\n    user,\n    token,\n    setUser,\n    setToken,\n    logOut\n  }), [isLoaded, user, token, setToken, logOut]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProvider, \"6F9kVVr95kut2QI3VPPQA2TrXWY=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/trigger/Рабочий стол/Docker-React/react-tutorial-real-app/src/providers/AuthProvider/index.jsx"],"names":["useCallback","useEffect","useMemo","useState","Cookies","AuthContext","api","AuthProvider","props","isLoaded","setIsLoaded","user","setUser","token","setTokenData","setToken","tokenData","set","remove","logOut","loadData","get","data","auth","getProfile","contextValue","children"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,OAAOC,GAAP,MAAgB,oBAAhB;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,KAAD,EAAQC,YAAR,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMY,QAAQ,GAAGf,WAAW,CAAEgB,SAAD,IAAe;AAC1CF,IAAAA,YAAY,CAACE,SAAD,CAAZ;;AAEA,QAAIA,SAAJ,EAAe;AACbZ,MAAAA,OAAO,CAACa,GAAR,CAAY,YAAZ,EAA0BD,SAA1B;AACD,KAFD,MAEO;AACLZ,MAAAA,OAAO,CAACc,MAAR,CAAe,YAAf;AACD;AACF,GAR2B,EAQzB,EARyB,CAA5B;AAUA,QAAMC,MAAM,GAAGnB,WAAW,CAAC,MAAM;AAC/BY,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAG,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAHyB,EAGvB,CAACA,QAAD,CAHuB,CAA1B;AAKA,QAAMK,QAAQ,GAAGpB,WAAW,CAAC,YAAY;AACvC,UAAMgB,SAAS,GAAGZ,OAAO,CAACiB,GAAR,CAAY,YAAZ,CAAlB;AACAP,IAAAA,YAAY,CAACE,SAAD,CAAZ;;AAEA,QAAI;AACF,UAAIA,SAAJ,EAAe;AACb,cAAM;AAAEM,UAAAA;AAAF,YAAW,MAAMhB,GAAG,CAACiB,IAAJ,CAASC,UAAT,EAAvB;AACAZ,QAAAA,OAAO,CAACU,IAAD,CAAP;AACD;AACF,KALD,CAKE,MAAM;AACNP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAPD,SAOU;AACRL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GAd2B,EAczB,CAACK,QAAD,CAdyB,CAA5B;AAgBAd,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,QAAMK,YAAY,GAAGvB,OAAO,CAC1B,OAAO;AACLO,IAAAA,QADK;AAELE,IAAAA,IAFK;AAGLE,IAAAA,KAHK;AAILD,IAAAA,OAJK;AAKLG,IAAAA,QALK;AAMLI,IAAAA;AANK,GAAP,CAD0B,EAS1B,CAACV,QAAD,EAAWE,IAAX,EAAiBE,KAAjB,EAAwBE,QAAxB,EAAkCI,MAAlC,CAT0B,CAA5B;AAYA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEM,YAA7B;AAAA,cACGjB,KAAK,CAACkB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAzDQnB,Y;;KAAAA,Y;AA2DT,eAAeA,YAAf","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { AuthContext } from \"../../contexts/AuthContext\";\nimport api from \"../../services/api\";\n\nfunction AuthProvider(props) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setTokenData] = useState(null);\n\n  const setToken = useCallback((tokenData) => {\n    setTokenData(tokenData);\n\n    if (tokenData) {\n      Cookies.set(\"auth-token\", tokenData);\n    } else {\n      Cookies.remove(\"auth-token\");\n    }\n  }, []);\n\n  const logOut = useCallback(() => {\n    setUser(null);\n    setToken(null);\n  }, [setToken]);\n\n  const loadData = useCallback(async () => {\n    const tokenData = Cookies.get(\"auth-token\");\n    setTokenData(tokenData);\n\n    try {\n      if (tokenData) {\n        const { data } = await api.auth.getProfile();\n        setUser(data);\n      }\n    } catch {\n      setToken(null);\n    } finally {\n      setIsLoaded(true);\n    }\n  }, [setToken]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const contextValue = useMemo(\n    () => ({\n      isLoaded,\n      user,\n      token,\n      setUser,\n      setToken,\n      logOut,\n    }),\n    [isLoaded, user, token, setToken, logOut]\n  );\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}